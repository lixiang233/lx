<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <title>快速入门 — Flask 0.10.1 文档</title>
    
    <link rel="stylesheet" href="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/flasky.css" type="text/css">
    <link rel="stylesheet" href="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/pygments.css" type="text/css">
    
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '0.10.1',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/jquery.js"></script>
    <script type="text/javascript" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/underscore.js"></script>
    <script type="text/javascript" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/doctools.js"></script>
    <script type="text/javascript" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/translations.js"></script>
    <link rel="top" title="Flask 0.10.1 文档" href="http://docs.jinkan.org/docs/flask/index.html">
    <link rel="next" title="教程" href="http://docs.jinkan.org/docs/flask/tutorial/index.html">
    <link rel="prev" title="安装" href="http://docs.jinkan.org/docs/flask/installation.html">
   
  
  <link rel="apple-touch-icon" href="http://docs.jinkan.org/docs/flask/_static/touch-icon.png">
  
  <link media="only screen and (max-device-width: 480px)" href="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/small_flask.css" type="text/css" rel="stylesheet">
  <script src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/functions.js" type="text/javascript"></script>

  </head>
  <body>
  
  

    <div class="related">
      <h3>导航</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="http://docs.jinkan.org/docs/flask/genindex.html" title="总目录" accesskey="I">索引</a></li>
        <li class="right">
          <a href="http://docs.jinkan.org/docs/flask/tutorial/index.html" title="教程" accesskey="N">下一页</a> |</li>
        <li class="right">
          <a href="http://docs.jinkan.org/docs/flask/installation.html" title="安装" accesskey="P">上一页</a> |</li>
        <li><a href="http://docs.jinkan.org/docs/flask/index.html">Flask 0.10.1 文档</a> »</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="quickstart">
<span id="id1"></span><h1>快速入门<a class="headerlink" href="#quickstart" title="永久链接至标题">¶</a></h1>
<p>迫不及待要开始了吗？本页提供了一个很好的 Flask 介绍，并假定你已经安装好了 Flask。如果没有，请跳转到 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/installation.html#installation"><em>安装</em></a> 章节。</p>
<div class="section" id="a-minimal-application">
<span id="id2"></span><h2>一个最小的应用<a class="headerlink" href="#a-minimal-application" title="永久链接至标题">¶</a></h2>
<p>一个最小的 Flask 应用看起来会是这样:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'Hello World!'</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
</div>
<p>把它保存为 <cite>hello.py</cite> （或是类似的），然后用 Python 解释器来运行。
确保你的应用文件名不是 <cite>flask.py</cite> ，因为这将与 Flask 本身冲突。</p>
<div class="highlight-python"><div class="highlight"><pre>$ python hello.py
 * Running on http://127.0.0.1:5000/
</pre></div>
</div>
<p>现在访问 <a class="reference external" href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> ，你会看见 Hello World 问候。</p>
<p>那么，这段代码做了什么？</p>
<ol class="arabic simple">
<li>首先，我们导入了 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask" title="flask.Flask"><tt class="xref py py-class docutils literal"><span class="pre">Flask</span></tt></a> 类。这个类的实例将会是我们的 WSGI 应用程序。</li>
<li>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。
如果你使用单一的模块（如本例），你应该使用 <cite>__name__</cite> ，因为模块的名称将会因其作为单独应用启动还是作为模块导入而有不同（
也即是 <tt class="docutils literal"><span class="pre">'__main__'</span></tt> 或实际的导入名）。这是必须的，这样 Flask
才知道到哪去找模板、静态文件等等。详情见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask" title="flask.Flask"><tt class="xref py py-class docutils literal"><span class="pre">Flask</span></tt></a>
的文档。</li>
<li>然后，我们使用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.route" title="flask.Flask.route"><tt class="xref py py-meth docutils literal"><span class="pre">route()</span></tt></a> 装饰器告诉 Flask 什么样的URL 能触发我们的函数。</li>
<li>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想要显示在用户浏览器中的信息。</li>
<li>最后我们用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.run" title="flask.Flask.run"><tt class="xref py py-meth docutils literal"><span class="pre">run()</span></tt></a> 函数来让应用运行在本地服务器上。
其中 <tt class="docutils literal"><span class="pre">if</span> <span class="pre">__name__</span> <span class="pre">==</span> <span class="pre">'__main__':</span></tt> 确保服务器只会在该脚本被
Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。</li>
</ol>
<p>欲关闭服务器，按 Ctrl+C。</p>
<div class="admonition- admonition" id="public-server">
<p class="first admonition-title">外部可访问的服务器</p>
<p>如果你运行了这个服务器，你会发现它只能从你自己的计算机上访问，网络中其它任何的地方都不能访问。在调试模式下，用户可以在你的计算机上执行任意 Python 代码。因此，这个行为是默认的。</p>
<p>如果你禁用了 <cite>debug</cite> 或信任你所在网络的用户，你可以简单修改调用
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.run" title="flask.Flask.run"><tt class="xref py py-meth docutils literal"><span class="pre">run()</span></tt></a> 的方法使你的服务器公开可用，如下:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'0.0.0.0'</span><span class="p">)</span>
</pre></div>
</div>
<p class="last">这会让操作系统监听所有公网 IP。</p>
</div>
</div>
<div class="section" id="debug-mode">
<span id="id3"></span><h2>调试模式<a class="headerlink" href="#debug-mode" title="永久链接至标题">¶</a></h2>
<p>虽然 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.run" title="flask.Flask.run"><tt class="xref py py-meth docutils literal"><span class="pre">run()</span></tt></a> 方法适用于启动本地的开发服务器，但是你每次修改代码后都要手动重启它。这样并不够优雅，而且 Flask 可以做到更好。如果你启用了调试支持，服务器会在代码修改后自动重新载入，并在发生错误时提供一个相当有用的调试器。</p>
<p>有两种途径来启用调试模式。一种是直接在应用对象上设置:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">app</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
</div>
<p>另一种是作为 run 方法的一个参数传入:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></div>
</div>
<p>两种方法的效果完全相同。</p>
<div class="admonition- admonition">
<p class="first admonition-title">注意</p>
<p class="last">尽管交互式调试器在允许 fork 的环境中无法正常使用（也即在生产服务器上正常使用几乎是不可能的），但它依然允许执行任意代码。这使它成为一个巨大的安全隐患，因此它 <strong>绝对不能用于生产环境</strong> 。</p>
</div>
<p>运行中的调试器截图：</p>
<img alt="screenshot of debugger in action" class="screenshot align-center" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/debugger.png">
<p>想用其它的调试器？ 参见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/errorhandling.html#working-with-debuggers"><em>调试器操作</em></a> 。</p>
</div>
<div class="section" id="routing">
<span id="id4"></span><h2>路由<a class="headerlink" href="#routing" title="永久链接至标题">¶</a></h2>
<p>现代 Web 应用的 URL 十分优雅，易于人们辨识记忆，这一点对于那些面向使用低速网络连接移动设备访问的应用特别有用。如果可以不访问索引页，而是直接访问想要的那个页面，他们多半会笑逐颜开而再度光顾。</p>
<p>如上所见， <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.route" title="flask.Flask.route"><tt class="xref py py-meth docutils literal"><span class="pre">route()</span></tt></a> 装饰器把一个函数绑定到对应的
URL 上。</p>
<p>这里是一些基本的例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'Index Page'</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/hello'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'Hello World'</span>
</pre></div>
</div>
<p>但是，不仅如此！你可以构造含有动态部分的 URL，也可以在一个函数上附着多个规则。</p>
<div class="section" id="variable-rules">
<span id="id5"></span><h3>变量规则<a class="headerlink" href="#variable-rules" title="永久链接至标题">¶</a></h3>
<p>要给 URL 添加变量部分，你可以把这些特殊的字段标记为 <tt class="docutils literal"><span class="pre">&lt;variable_name&gt;</span></tt> ，
这个部分将会作为命名参数传递到你的函数。规则可以用
<tt class="docutils literal"><span class="pre">&lt;converter:variable_name&gt;</span></tt> 指定一个可选的转换器。这里有一些不错的例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/user/&lt;username&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">show_user_profile</span><span class="p">(</span><span class="n">username</span><span class="p">):</span>
    <span class="c"># show the user profile for that user</span>
    <span class="k">return</span> <span class="s">'User </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="n">username</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/post/&lt;int:post_id&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">show_post</span><span class="p">(</span><span class="n">post_id</span><span class="p">):</span>
    <span class="c"># show the post with the given id, the id is an integer</span>
    <span class="k">return</span> <span class="s">'Post </span><span class="si">%d</span><span class="s">'</span> <span class="o">%</span> <span class="n">post_id</span>
</pre></div>
</div>
<p>转换器有下面几种：</p>
<table class="docutils" border="1">
<colgroup>
<col width="20%">
<col width="80%">
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td><cite>int</cite></td>
<td>接受整数</td>
</tr>
<tr class="row-even"><td><cite>float</cite></td>
<td>同 <cite>int</cite> ，但是接受浮点数</td>
</tr>
<tr class="row-odd"><td><cite>path</cite></td>
<td>和默认的相似，但也接受斜线</td>
</tr>
</tbody>
</table>
<div class="admonition-url admonition">
<p class="first admonition-title">唯一 URL / 重定向行为</p>
<p>Flask 的 URL 规则基于 Werkzeug 的路由模块。这个模块背后的思想是基于 Apache 以及更早的 HTTP 服务器主张的先例，保证优雅且唯一的 URL。</p>
<p>以这两个规则为例:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/projects/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">projects</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'The project page'</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/about'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">about</span><span class="p">():</span>
    <span class="k">return</span> <span class="s">'The about page'</span>
</pre></div>
</div>
<p>虽然它们看起来着实相似，但它们结尾斜线的使用在 URL <em>定义</em> 中不同。
第一种情况中，指向 <cite>projects</cite> 的规范 URL 尾端有一个斜线。这种感觉很像在文件系统中的文件夹。访问一个结尾不带斜线的 URL 会被
Flask 重定向到带斜线的规范 URL 去。</p>
<p>然而，第二种情况的 URL 结尾不带斜线，类似 UNIX-like 系统下的文件的路径名。访问结尾带斜线的 URL 会产生一个 404 “Not Found” 错误。</p>
<p class="last">这个行为使得在遗忘尾斜线时，允许关联的 URL 接任工作，与 Apache 和其它的服务器的行为并无二异。此外，也保证了 URL 的唯一，有助于避免搜索引擎索引同一个页面两次。</p>
</div>
</div>
<div class="section" id="url">
<span id="url-building"></span><h3>构造 URL<a class="headerlink" href="#url" title="永久链接至标题">¶</a></h3>
<p>如果 Flask 能匹配 URL，那么 Flask 可以生成它们吗？当然可以。你可以用
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.url_for" title="flask.url_for"><tt class="xref py py-func docutils literal"><span class="pre">url_for()</span></tt></a> 来给指定的函数构造 URL。它接受函数名作为第一个参数，也接受对应 URL 规则的变量部分的命名参数。未知变量部分会添加到
URL 末尾作为查询参数。这里有一些例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">url_for</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">index</span><span class="p">():</span> <span class="k">pass</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/login'</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">login</span><span class="p">():</span> <span class="k">pass</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/user/&lt;username&gt;'</span><span class="p">)</span>
<span class="gp">... </span><span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">username</span><span class="p">):</span> <span class="k">pass</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">test_request_context</span><span class="p">():</span>
<span class="gp">... </span> <span class="k">print</span> <span class="n">url_for</span><span class="p">(</span><span class="s">'index'</span><span class="p">)</span>
<span class="gp">... </span> <span class="k">print</span> <span class="n">url_for</span><span class="p">(</span><span class="s">'login'</span><span class="p">)</span>
<span class="gp">... </span> <span class="k">print</span> <span class="n">url_for</span><span class="p">(</span><span class="s">'login'</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="s">'/'</span><span class="p">)</span>
<span class="gp">... </span> <span class="k">print</span> <span class="n">url_for</span><span class="p">(</span><span class="s">'profile'</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="s">'John Doe'</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">/</span>
<span class="go">/login</span>
<span class="go">/login?next=/</span>
<span class="go">/user/John%20Doe</span>
</pre></div>
</div>
<p>（这里也用到了 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.test_request_context" title="flask.Flask.test_request_context"><tt class="xref py py-meth docutils literal"><span class="pre">test_request_context()</span></tt></a> 方法，下面会解释。即使我们正在通过 Python 的 shell 进行交互，它依然会告诉 Flask 要表现为正在处理一个请求。请看下面的解释。 <a class="reference internal" href="#context-locals"><em>环境局部变量</em></a> ）</p>
<p>为什么你要构建 URL 而非在模板中硬编码？这里有三个绝妙的理由：</p>
<ol class="arabic simple">
<li>反向构建通常比硬编码的描述性更好。更重要的是，它允许你一次性修改 URL，
而不是到处边找边改。</li>
<li>URL 构建会转义特殊字符和 Unicode 数据，免去你很多麻烦。</li>
<li>如果你的应用不位于 URL 的根路径（比如，在 <tt class="docutils literal"><span class="pre">/myapplication</span></tt> 下，而不是 <tt class="docutils literal"><span class="pre">/</span></tt> ）， <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.url_for" title="flask.url_for"><tt class="xref py py-func docutils literal"><span class="pre">url_for()</span></tt></a> 会妥善处理这个问题。</li>
</ol>
</div>
<div class="section" id="http">
<span id="http-methods"></span><h3>HTTP 方法<a class="headerlink" href="#http" title="永久链接至标题">¶</a></h3>
<p>HTTP （与 Web 应用会话的协议）有许多不同的访问 URL 方法。默认情况下，路由只回应 <cite>GET</cite> 请求，但是通过 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.route" title="flask.Flask.route"><tt class="xref py py-meth docutils literal"><span class="pre">route()</span></tt></a> 装饰器传递
<cite>methods</cite> 参数可以改变这个行为。这里有一些例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/login'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">do_the_login</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">show_the_login_form</span><span class="p">()</span>
</pre></div>
</div>
<p>如果存在 <cite>GET</cite> ，那么也会替你自动地添加 <cite>HEAD</cite>，无需干预。它会确保遵照 <a class="reference external" href="http://www.ietf.org/rfc/rfc2068.txt">HTTP RFC</a> （描述 HTTP 协议的文档）处理 <cite>HEAD</cite> 请求，所以你可以完全忽略这部分的 HTTP 规范。同样，自从 Flask 0.6 起， 也实现了
<cite>OPTIONS</cite> 的自动处理。</p>
<p>你不知道一个 HTTP 方法是什么？不必担心，这里会简要介绍 HTTP 方法和它们为什么重要：</p>
<p>HTTP 方法（也经常被叫做“谓词”）告知服务器，客户端想对请求的页面 <em>做</em>
些什么。下面的都是非常常见的方法：</p>
<dl class="docutils">
<dt><cite>GET</cite></dt>
<dd>浏览器告知服务器：只 <em>获取</em> 页面上的信息并发给我。这是最常用的方法。</dd>
<dt><cite>HEAD</cite></dt>
<dd>浏览器告诉服务器：欲获取信息，但是只关心 <em>消息头</em> 。应用应像处理
<cite>GET</cite> 请求一样来处理它，但是不分发实际内容。在 Flask 中你完全无需
人工    干预，底层的 Werkzeug 库已经替你打点好了。</dd>
<dt><cite>POST</cite></dt>
<dd>浏览器告诉服务器：想在 URL 上 <em>发布</em> 新信息。并且，服务器必须确保
数据已存储且仅存储一次。这是 HTML 表单通常发送数据到服务器的方法。</dd>
<dt><cite>PUT</cite></dt>
<dd>类似 <cite>POST</cite> 但是服务器可能触发了存储过程多次，多次覆盖掉旧值。你可
能会问这有什么用，当然这是有原因的。考虑到传输中连接可能会丢失，在
这种    情况下浏览器和服务器之间的系统可能安全地第二次接收请求，而
不破坏其它东西。因为 <cite>POST</cite> 它只触发一次，所以用 <cite>POST</cite> 是不可能的。</dd>
<dt><cite>DELETE</cite></dt>
<dd>删除给定位置的信息。</dd>
<dt><cite>OPTIONS</cite></dt>
<dd>给客户端提供一个敏捷的途径来弄清这个 URL 支持哪些 HTTP 方法。
从 Flask 0.6 开始，实现了自动处理。</dd>
</dl>
<p>有趣的是，在 HTML4 和 XHTML1 中，表单只能以 <cite>GET</cite> 和 <cite>POST</cite> 方法提交到服务器。但是 JavaScript 和未来的 HTML 标准允许你使用其它所有的方法。此外，HTTP 最近变得相当流行，浏览器不再是唯一的 HTTP 客户端。比如，许多版本控制系统就在使用 HTTP。</p>
</div>
</div>
<div class="section" id="static-files">
<span id="id6"></span><h2>静态文件<a class="headerlink" href="#static-files" title="永久链接至标题">¶</a></h2>
<p>动态 web 应用也会需要静态文件，通常是 CSS 和 JavaScript 文件。理想状况下，
你已经配置好 Web 服务器来提供静态文件，但是在开发中，Flask 也可以做到。
只要在你的包中或是模块的所在目录中创建一个名为 <cite>static</cite> 的文件夹，在应用中使用 <cite>/static</cite> 即可访问。</p>
<p>给静态文件生成 URL ，使用特殊的 <tt class="docutils literal"><span class="pre">'static'</span></tt> 端点名:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">url_for</span><span class="p">(</span><span class="s">'static'</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="s">'style.css'</span><span class="p">)</span>
</pre></div>
</div>
<p>这个文件应该存储在文件系统上的 <tt class="docutils literal"><span class="pre">static/style.css</span></tt> 。</p>
</div>
<div class="section" id="id7">
<h2>模板渲染<a class="headerlink" href="#id7" title="永久链接至标题">¶</a></h2>
<p>用 Python 生成 HTML 十分无趣，而且相当繁琐，因为你必须手动对 HTML 做转义来保证应用的安全。为此，Flask 配备了
<a class="reference external" href="http://jinja.pocoo.org/">Jinja2</a> 模板引擎。</p>
<p>你可以使用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.render_template" title="flask.render_template"><tt class="xref py py-func docutils literal"><span class="pre">render_template()</span></tt></a> 方法来渲染模板。你需要做的一切就是将模板名和你想作为关键字的参数传入模板的变量。这里有一个展示如何渲染模板的简例:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/hello/'</span><span class="p">)</span>
<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/hello/&lt;name&gt;'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'hello.html'</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">)</span>
</pre></div>
</div>
<p>Flask 会在 <cite>templates</cite> 文件夹里寻找模板。所以，如果你的应用是个模块，这个文件夹应该与模块同级；如果它是一个包，那么这个文件夹作为包的子目录:</p>
<p><strong>情况 1</strong>: 模块:</p>
<div class="highlight-python"><div class="highlight"><pre>/application.py
/templates
    /hello.html
</pre></div>
</div>
<p><strong>情况 2</strong>: 包:</p>
<div class="highlight-python"><div class="highlight"><pre>/application
    /__init__.py
    /templates
        /hello.html
</pre></div>
</div>
<p>关于模板，你可以发挥 Jinja2 模板的全部实例。更多信息请见
<a class="reference external" href="http://docs.jinkan.org/docs/jinja2">Jinja2 模板文档</a> 。</p>
<p>这里有一个模板实例：</p>
<div class="highlight-html+jinja"><div class="highlight"><pre><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;title&gt;</span>Hello from Flask<span class="nt">&lt;/title&gt;</span>
<span class="cp">{%</span> <span class="k">if</span> <span class="nv">name</span> <span class="cp">%}</span>
  <span class="nt">&lt;h1&gt;</span>Hello <span class="cp">{{</span> <span class="nv">name</span> <span class="cp">}}</span>!<span class="nt">&lt;/h1&gt;</span>
<span class="cp">{%</span> <span class="k">else</span> <span class="cp">%}</span>
  <span class="nt">&lt;h1&gt;</span>Hello World!<span class="nt">&lt;/h1&gt;</span>
<span class="cp">{%</span> <span class="k">endif</span> <span class="cp">%}</span>
</pre></div>
</div>
<p>在模板里，你也可以访问 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.request" title="flask.request"><tt class="xref py py-class docutils literal"><span class="pre">request</span></tt></a> 、
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.session" title="flask.session"><tt class="xref py py-class docutils literal"><span class="pre">session</span></tt></a> 和 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.g" title="flask.g"><tt class="xref py py-class docutils literal"><span class="pre">g</span></tt></a> <a class="footnote-reference" href="#id10" id="id9">[1]</a> 对象，
以及 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.get_flashed_messages" title="flask.get_flashed_messages"><tt class="xref py py-func docutils literal"><span class="pre">get_flashed_messages()</span></tt></a> 函数。</p>
<p>模板继承让模板用起来相当顺手。如欲了解继承的工作机理，请跳转到
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/patterns/templateinheritance.html#template-inheritance"><em>模板继承</em></a> 模式的文档。最起码，模板继承能使特定元素
（比如页眉、导航栏和页脚）可以出现在所有的页面。</p>
<p>自动转义功能默认是开启的，所以如果 <cite>name</cite> 包含 HTML ，它将会被自动转义。如果你能信任一个变量，并且你知道它是安全的（例如一个模块把 Wiki 标记转换为 HTML），你可以用 <tt class="xref py py-class docutils literal"><span class="pre">Markup</span></tt> 类或 <tt class="docutils literal"><span class="pre">|safe</span></tt> 过滤器在模板中把它标记为安全的。在 Jinja 2 文档中，你会看到更多的例子。</p>
<p>这里是一个 <tt class="xref py py-class docutils literal"><span class="pre">Markup</span></tt> 类如何使用的简单介绍:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Markup</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Markup</span><span class="p">(</span><span class="s">'&lt;strong&gt;Hello </span><span class="si">%s</span><span class="s">!&lt;/strong&gt;'</span><span class="p">)</span> <span class="o">%</span> <span class="s">'&lt;blink&gt;hacker&lt;/blink&gt;'</span>
<span class="go">Markup(u'&lt;strong&gt;Hello &amp;lt;blink&amp;gt;hacker&amp;lt;/blink&amp;gt;!&lt;/strong&gt;')</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Markup</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="s">'&lt;blink&gt;hacker&lt;/blink&gt;'</span><span class="p">)</span>
<span class="go">Markup(u'&amp;lt;blink&amp;gt;hacker&amp;lt;/blink&amp;gt;')</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Markup</span><span class="p">(</span><span class="s">'&lt;em&gt;Marked up&lt;/em&gt; &amp;raquo; HTML'</span><span class="p">)</span><span class="o">.</span><span class="n">striptags</span><span class="p">()</span>
<span class="go">u'Marked up \xbb HTML'</span>
</pre></div>
</div>
<div class="versionchanged">
<p><span class="versionmodified">在 0.5 版更改: </span>自动转义不再在所有模板中启用。下列扩展名的模板会触发自动转义：
<tt class="docutils literal"><span class="pre">.html</span></tt> 、 <tt class="docutils literal"><span class="pre">.htm</span></tt> 、<tt class="docutils literal"><span class="pre">.xml</span></tt> 、 <tt class="docutils literal"><span class="pre">.xhtml</span></tt> 。从字符串加载的模板会禁用自动转义。</p>
</div>
<table class="docutils footnote" frame="void" id="id10" rules="none">
<colgroup><col class="label"><col></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id9">[1]</a></td><td>不确定 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.g" title="flask.g"><tt class="xref py py-class docutils literal"><span class="pre">g</span></tt></a> 对象是什么？它允许你按需存储信息，
查看（ <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.g" title="flask.g"><tt class="xref py py-class docutils literal"><span class="pre">g</span></tt></a> ）对象的文档和 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/patterns/sqlite3.html#sqlite3"><em>在 Flask 中使用 SQLite 3</em></a> 的文档以获取更多信息。</td></tr>
</tbody>
</table>
</div>
<div class="section" id="accessing-request-data">
<span id="id11"></span><h2>访问请求数据<a class="headerlink" href="#accessing-request-data" title="永久链接至标题">¶</a></h2>
<p>对于 Web 应用，与客户端发送给服务器的数据交互至关重要。在 Flask 中由全局的 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.request" title="flask.request"><tt class="xref py py-class docutils literal"><span class="pre">request</span></tt></a> 对象来提供这些信息。如果你有一定的
Python 经验，你会好奇，为什么这个对象是全局的，为什么 Flask 还能保证线程安全。答案是环境作用域：</p>
<div class="section" id="context-locals">
<span id="id12"></span><h3>环境局部变量<a class="headerlink" href="#context-locals" title="永久链接至标题">¶</a></h3>
<div class="admonition- admonition">
<p class="first admonition-title">内幕</p>
<p class="last">如果你想理解其工作机制及如何利用环境局部变量实现自动化测试，请阅读此节，否则可跳过。</p>
</div>
<p>Flask 中的某些对象是全局对象，但却不是通常的那种。这些对象实际上是特定环境的局部对象的代理。虽然很拗口，但实际上很容易理解。</p>
<p>想象一下处理线程的环境。一个请求传入，Web 服务器决定生成一个新线程（
或者别的什么东西，只要这个底层的对象可以胜任并发系统，而不仅仅是线程）。
当 Flask 开始它内部的请求处理时，它认定当前线程是活动的环境，并绑定当前的应用和 WSGI 环境到那个环境上（线程）。它的实现很巧妙，能保证一个应用调用另一个应用时不会出现问题。</p>
<p>所以，这对你来说意味着什么？除非你要做类似单元测试的东西，否则你基本上可以完全无视它。你会发现依赖于一段请求对象的代码，因没有请求对象无法正常运行。解决方案是，自行创建一个请求对象并且把它绑定到环境中。单元测试的最简单的解决方案是：用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.test_request_context" title="flask.Flask.test_request_context"><tt class="xref py py-meth docutils literal"><span class="pre">test_request_context()</span></tt></a> 环境管理器。结合 <cite>with</cite> 声明，绑定一个测试请求，这样你才能与之交互。下面是一个例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>

<span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">test_request_context</span><span class="p">(</span><span class="s">'/hello'</span><span class="p">,</span> <span class="n">method</span><span class="o">=</span><span class="s">'POST'</span><span class="p">):</span>
    <span class="c"># now you can do something with the request until the</span>
    <span class="c"># end of the with block, such as basic assertions:</span>
    <span class="k">assert</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span> <span class="o">==</span> <span class="s">'/hello'</span>
    <span class="k">assert</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span>
</pre></div>
</div>
<p>另一种可能是：传递整个 WSGI 环境给
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.request_context" title="flask.Flask.request_context"><tt class="xref py py-meth docutils literal"><span class="pre">request_context()</span></tt></a> 方法:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>

<span class="k">with</span> <span class="n">app</span><span class="o">.</span><span class="n">request_context</span><span class="p">(</span><span class="n">environ</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span>
</pre></div>
</div>
</div>
<div class="section" id="the-request-object">
<span id="id13"></span><h3>请求对象<a class="headerlink" href="#the-request-object" title="永久链接至标题">¶</a></h3>
<p>API 章节对请求对象作了详尽阐述（参见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.request" title="flask.request"><tt class="xref py py-class docutils literal"><span class="pre">request</span></tt></a> ），因此这里不会赘述。此处宽泛介绍一些最常用的操作。首先从 <cite>flask</cite> 模块里导入它:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>
</pre></div>
</div>
<p>当前请求的 HTTP 方法可通过 <tt class="xref py py-attr docutils literal"><span class="pre">method</span></tt> 属性来访问。通过:attr:<cite>~flask.request.form</cite> 属性来访问表单数据（ <cite>POST</cite> 或 <cite>PUT</cite> 请求提交的数据）。这里有一个用到上面提到的那两个属性的完整实例:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.route</span><span class="p">(</span><span class="s">'/login'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">,</span> <span class="s">'GET'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">error</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">valid_login</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">'username'</span><span class="p">],</span>
                       <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">'password'</span><span class="p">]):</span>
            <span class="k">return</span> <span class="n">log_the_user_in</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">'username'</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">error</span> <span class="o">=</span> <span class="s">'Invalid username/password'</span>
    <span class="c"># the code below is executed if the request method</span>
    <span class="c"># was GET or the credentials were invalid</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'login.html'</span><span class="p">,</span> <span class="n">error</span><span class="o">=</span><span class="n">error</span><span class="p">)</span>
</pre></div>
</div>
<p>当访问 <cite>form</cite> 属性中的不存在的键会发生什么？会抛出一个特殊的
<a class="reference external" href="http://docs.python.org/dev/library/exceptions.html#KeyError" title="(在 Python v3.5)"><tt class="xref py py-exc docutils literal"><span class="pre">KeyError</span></tt></a> 异常。你可以像捕获标准的 <a class="reference external" href="http://docs.python.org/dev/library/exceptions.html#KeyError" title="(在 Python v3.5)"><tt class="xref py py-exc docutils literal"><span class="pre">KeyError</span></tt></a> 一样来捕获它。
如果你不这么做，它会显示一个 HTTP 400 Bad Request 错误页面。所以，多数情况下你并不需要干预这个行为。</p>
<p>你可以通过 <tt class="xref py py-attr docutils literal"><span class="pre">args</span></tt> 属性来访问 URL 中提交的参数
（ <tt class="docutils literal"><span class="pre">?key=value</span></tt> ）:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">searchword</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'q'</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
</pre></div>
</div>
<p>我们推荐用 <cite>get</cite> 来访问 URL 参数或捕获 <cite>KeyError</cite> ，因为用户可能会修改 URL，向他们展现一个 400 bad request 页面会影响用户体验。</p>
<p>欲获取请求对象的完整方法和属性清单，请参阅 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.request" title="flask.request"><tt class="xref py py-class docutils literal"><span class="pre">request</span></tt></a> 的文档。</p>
</div>
<div class="section" id="file-uploads">
<span id="id14"></span><h3>文件上传<a class="headerlink" href="#file-uploads" title="永久链接至标题">¶</a></h3>
<p>用 Flask 处理文件上传很简单。只要确保你没忘记在 HTML 表单中设置
<tt class="docutils literal"><span class="pre">enctype="multipart/form-data"</span></tt> 属性，不然你的浏览器根本不会发送文件。</p>
<p>已上传的文件存储在内存或是文件系统中一个临时的位置。你可以通过请求对象的 <tt class="xref py py-attr docutils literal"><span class="pre">files</span></tt> 属性访问它们。每个上传的文件都会存储在这个字典里。它表现近乎为一个标准的 Python <tt class="xref py py-class docutils literal"><span class="pre">file</span></tt> 对象，但它还有一个 <a class="reference external" href="http://werkzeug.pocoo.org/docs/datastructures/#werkzeug.datastructures.FileStorage.save" title="(在 Werkzeug v0.10)"><tt class="xref py py-meth docutils literal"><span class="pre">save()</span></tt></a> 方法，这个方法允许你把文件保存到服务器的文件系统上。这里是一个用它保存文件的例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/upload'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s">'the_file'</span><span class="p">]</span>
        <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/var/www/uploads/uploaded_file.txt'</span><span class="p">)</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>如果你想知道上传前文件在客户端的文件名是什么，你可以访问
<a class="reference external" href="http://werkzeug.pocoo.org/docs/datastructures/#werkzeug.datastructures.FileStorage.filename" title="(在 Werkzeug v0.10)"><tt class="xref py py-attr docutils literal"><span class="pre">filename</span></tt></a> 属性。但请记住，
永远不要信任这个值，这个值是可以伪造的。如果你要把文件按客户端提供的文件名存储在服务器上，那么请把它传递给 Werkzeug 提供的
<a class="reference external" href="http://werkzeug.pocoo.org/docs/utils/#werkzeug.utils.secure_filename" title="(在 Werkzeug v0.10)"><tt class="xref py py-func docutils literal"><span class="pre">secure_filename()</span></tt></a> 函数:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>
<span class="kn">from</span> <span class="nn">werkzeug</span> <span class="kn">import</span> <span class="n">secure_filename</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/upload'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">upload_file</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">files</span><span class="p">[</span><span class="s">'the_file'</span><span class="p">]</span>
        <span class="n">f</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s">'/var/www/uploads/'</span> <span class="o">+</span> <span class="n">secure_filename</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>一些更好的例子，见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/patterns/fileuploads.html#uploading-files"><em>上传文件</em></a> 模式。</p>
</div>
<div class="section" id="cookies">
<span id="id15"></span><h3>Cookies<a class="headerlink" href="#cookies" title="永久链接至标题">¶</a></h3>
<p>你可以通过 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Request.cookies" title="flask.Request.cookies"><tt class="xref py py-attr docutils literal"><span class="pre">cookies</span></tt></a> 属性来访问 Cookies，用响应对象的 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Response.set_cookie" title="flask.Response.set_cookie"><tt class="xref py py-attr docutils literal"><span class="pre">set_cookie</span></tt></a> 方法来设置 Cookies。请求对象的 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Request.cookies" title="flask.Request.cookies"><tt class="xref py py-attr docutils literal"><span class="pre">cookies</span></tt></a> 属性是一个内容为客户端提交的所有 Cookies 的字典。如果你想使用会话，请不要直接使用 Cookies，请参考 <a class="reference internal" href="#sessions"><em>会话</em></a> 一节。在 Flask 中，已经注意处理了一些 Cookies 安全细节。</p>
<p>读取 cookies:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">request</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">'username'</span><span class="p">)</span>
    <span class="c"># use cookies.get(key) instead of cookies[key] to not get a</span>
    <span class="c"># KeyError if the cookie is missing.</span>
</pre></div>
</div>
<p>存储 cookies:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">make_response</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">make_response</span><span class="p">(</span><span class="n">render_template</span><span class="p">(</span><span class="o">...</span><span class="p">))</span>
    <span class="n">resp</span><span class="o">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'the username'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">resp</span>
</pre></div>
</div>
<p>可注意到的是，Cookies 是设置在响应对象上的。由于通常视图函数只是返回字符串，之后 Flask 将字符串转换为响应对象。如果你要显式地转换，你可以使用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.make_response" title="flask.make_response"><tt class="xref py py-meth docutils literal"><span class="pre">make_response()</span></tt></a> 函数然后再进行修改。</p>
<p>有时候你想设置 Cookie，但响应对象不能醋在。这可以利用
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/patterns/deferredcallbacks.html#deferred-callbacks"><em>延迟请求回调</em></a> 模式实现。</p>
<p>为此，也可以阅读 <a class="reference internal" href="#about-responses"><em>关于响应</em></a> 。</p>
</div>
</div>
<div class="section" id="redirects-and-errors">
<span id="id16"></span><h2>重定向和错误<a class="headerlink" href="#redirects-and-errors" title="永久链接至标题">¶</a></h2>
<p>你可以用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.redirect" title="flask.redirect"><tt class="xref py py-func docutils literal"><span class="pre">redirect()</span></tt></a> 函数把用户重定向到其它地方。放弃请求并返回错误代码，用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.abort" title="flask.abort"><tt class="xref py py-func docutils literal"><span class="pre">abort()</span></tt></a> 函数。这里是一个它们如何使用的例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">abort</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'login'</span><span class="p">))</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/login'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">abort</span><span class="p">(</span><span class="mi">401</span><span class="p">)</span>
    <span class="n">this_is_never_executed</span><span class="p">()</span>
</pre></div>
</div>
<p>这是一个相当无意义的例子因为用户会从主页重定向到一个不能访问的页面
（401 意味着禁止访问），但是它展示了重定向是如何工作的。</p>
<p>默认情况下，错误代码会显示一个黑白的错误页面。如果你要定制错误页面，
可以使用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.errorhandler" title="flask.Flask.errorhandler"><tt class="xref py py-meth docutils literal"><span class="pre">errorhandler()</span></tt></a> 装饰器:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>

<span class="nd">@app.errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">page_not_found</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'page_not_found.html'</span><span class="p">),</span> <span class="mi">404</span>
</pre></div>
</div>
<p>注意 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.render_template" title="flask.render_template"><tt class="xref py py-func docutils literal"><span class="pre">render_template()</span></tt></a> 调用之后的 <tt class="docutils literal"><span class="pre">404</span></tt> 。这告诉
Flask，该页的错误代码是 404 ，即没有找到。默认为 200，也就是一切正常。</p>
</div>
<div class="section" id="about-responses">
<span id="id17"></span><h2>关于响应<a class="headerlink" href="#about-responses" title="永久链接至标题">¶</a></h2>
<p>视图函数的返回值会被自动转换为一个响应对象。如果返回值是一个字符串，
它被转换为该字符串为主体的、状态码为 <tt class="docutils literal"><span class="pre">200</span> <span class="pre">OK``的</span> <span class="pre">、</span> <span class="pre">MIME</span> <span class="pre">类型是</span>
<span class="pre">``text/html</span></tt> 的响应对象。Flask 把返回值转换为响应对象的逻辑是这样：</p>
<ol class="arabic simple">
<li>如果返回的是一个合法的响应对象，它会从视图直接返回。</li>
<li>如果返回的是一个字符串，响应对象会用字符串数据和默认参数创建。</li>
<li>如果返回的是一个元组，且元组中的元素可以提供额外的信息。这样的元组必须是 <tt class="docutils literal"><span class="pre">(response,</span> <span class="pre">status,</span> <span class="pre">headers)</span></tt> 的形式，且至少包含一个元素。 <cite>status</cite> 值会覆盖状态代码， <cite>headers</cite> 可以是一个列表或字典，作为额外的消息标头值。</li>
<li>如果上述条件均不满足， Flask 会假设返回值是一个合法的 WSGI 应用程序，并转换为一个请求对象。</li>
</ol>
<p>如果你想在视图里操纵上述步骤结果的响应对象，可以使用
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.make_response" title="flask.make_response"><tt class="xref py py-func docutils literal"><span class="pre">make_response()</span></tt></a> 函数。</p>
<p>譬如你有这样一个视图:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">not_found</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'error.html'</span><span class="p">),</span> <span class="mi">404</span>
</pre></div>
</div>
<p>你只需要把返回值表达式传递给 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.make_response" title="flask.make_response"><tt class="xref py py-func docutils literal"><span class="pre">make_response()</span></tt></a> ，获取结果对象并修改，然后再返回它:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="nd">@app.errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">not_found</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">make_response</span><span class="p">(</span><span class="n">render_template</span><span class="p">(</span><span class="s">'error.html'</span><span class="p">),</span> <span class="mi">404</span><span class="p">)</span>
    <span class="n">resp</span><span class="o">.</span><span class="n">headers</span><span class="p">[</span><span class="s">'X-Something'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'A value'</span>
    <span class="k">return</span> <span class="n">resp</span>
</pre></div>
</div>
</div>
<div class="section" id="sessions">
<span id="id18"></span><h2>会话<a class="headerlink" href="#sessions" title="永久链接至标题">¶</a></h2>
<p>除请求对象之外，还有一个 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.session" title="flask.session"><tt class="xref py py-class docutils literal"><span class="pre">session</span></tt></a> 对象。它允许你在不同请求间存储特定用户的信息。它是在 Cookies 的基础上实现的，并且对
Cookies 进行密钥签名。这意味着用户可以查看你 Cookie 的内容，但却不能修改它，除非用户知道签名的密钥。</p>
<p>要使用会话，你需要设置一个密钥。这里介绍会话如何工作:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">session</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span><span class="p">,</span> <span class="n">escape</span><span class="p">,</span> <span class="n">request</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">if</span> <span class="s">'username'</span> <span class="ow">in</span> <span class="n">session</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">'Logged in as </span><span class="si">%s</span><span class="s">'</span> <span class="o">%</span> <span class="n">escape</span><span class="p">(</span><span class="n">session</span><span class="p">[</span><span class="s">'username'</span><span class="p">])</span>
    <span class="k">return</span> <span class="s">'You are not logged in'</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/login'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">session</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">form</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'index'</span><span class="p">))</span>
    <span class="k">return</span> <span class="s">'''</span>
<span class="s">        &lt;form action="" method="post"&gt;</span>
<span class="s">            &lt;p&gt;&lt;input type=text name=username&gt;</span>
<span class="s">            &lt;p&gt;&lt;input type=submit value=Login&gt;</span>
<span class="s">        &lt;/form&gt;</span>
<span class="s">    '''</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="s">'/logout'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">logout</span><span class="p">():</span>
    <span class="c"># remove the username from the session if it's there</span>
    <span class="n">session</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s">'username'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'index'</span><span class="p">))</span>

<span class="c"># set the secret key.  keep this really secret:</span>
<span class="n">app</span><span class="o">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="s">'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'</span>
</pre></div>
</div>
<p>这里提到的 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.escape" title="flask.escape"><tt class="xref py py-func docutils literal"><span class="pre">escape()</span></tt></a> 可以在你模板引擎外做转义（如同本例）。</p>
<div class="admonition- admonition">
<p class="first admonition-title">如何生成强壮的密钥</p>
<p>随机的问题在于很难判断什么是真随机。一个密钥应该足够随机。你的操作系统可以基于一个密钥随机生成器来生成漂亮的随机值，这个值可以用来做密钥:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">os</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="go">'\xfd{H\xe5&lt;\x95\xf9\xe3\x96.5\xd1\x01O&lt;!\xd5\xa2\xa0\x9fR"\xa1\xa8'</span>
</pre></div>
</div>
<p class="last">把这个值复制粘贴进你的代码中，你就有了密钥。</p>
</div>
<p>使用基于 cookie 的会话需注意: Flask 会将你放进会话对象的值序列化至
Cookies。如果你发现某些值在请求之间并没有持久存在，然而确实已经启用了
Cookies，但也没有得到明确的错误信息。这时，请检查你的页面响应中的
Cookies 的大小，并与 Web 浏览器所支持的大小对比。</p>
</div>
<div class="section" id="id19">
<h2>消息闪现<a class="headerlink" href="#id19" title="永久链接至标题">¶</a></h2>
<p>反馈，是良好的应用和用户界面的重要构成。如果用户得不到足够的反馈，他们很可能开始厌恶这个应用。 Flask 提供了消息闪现系统，可以简单地给用户反馈。
消息闪现系统通常会在请求结束时记录信息，并在下一个（且仅在下一个）请求中访问记录的信息。展现这些消息通常结合要模板布局。</p>
<p>使用 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.flash" title="flask.flash"><tt class="xref py py-func docutils literal"><span class="pre">flash()</span></tt></a> 方法可以闪现一条消息。要操作消息本身，请使用
<a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.get_flashed_messages" title="flask.get_flashed_messages"><tt class="xref py py-func docutils literal"><span class="pre">get_flashed_messages()</span></tt></a> 函数，并且在模板中也可以使用。完整的例子见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/patterns/flashing.html#message-flashing-pattern"><em>消息闪现</em></a> 部分。</p>
</div>
<div class="section" id="logging">
<span id="id20"></span><h2>日志记录<a class="headerlink" href="#logging" title="永久链接至标题">¶</a></h2>
<div class="versionadded">
<p><span class="versionmodified">0.3 新版功能.</span></p>
</div>
<p>有时候你会处于这样一种境地，你处理的数据本应该是正确的，但实际上不是。
比如，你会有一些向服务器发送请求的客户端代码，但请求显然是畸形的。这可能是用户篡改了数据，或是客户端代码的粗制滥造。大多数情况下，正常地返回
<tt class="docutils literal"><span class="pre">400</span> <span class="pre">Bad</span> <span class="pre">Request</span></tt> 就可以了，但是有时候不能这么做，并且要让代码继续运行。</p>
<p>你可能依然想要记录下，是什么不对劲。这时日志记录就派上了用场。从
Flask 0.3 开始，Flask 就已经预置了日志系统。</p>
<p>这里有一些调用日志记录的例子:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span><span class="p">(</span><span class="s">'A value for debugging'</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">warning</span><span class="p">(</span><span class="s">'A warning occurred (</span><span class="si">%d</span><span class="s"> apples)'</span><span class="p">,</span> <span class="mi">42</span><span class="p">)</span>
<span class="n">app</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s">'An error occurred'</span><span class="p">)</span>
</pre></div>
</div>
<p>附带的 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/api.html#flask.Flask.logger" title="flask.Flask.logger"><tt class="xref py py-attr docutils literal"><span class="pre">logger</span></tt></a> 是一个标准日志类
<a class="reference external" href="http://docs.python.org/dev/library/logging.html#logging.Logger" title="(在 Python v3.5)"><tt class="xref py py-class docutils literal"><span class="pre">Logger</span></tt></a> ，所以更多信息请查阅 <a class="reference external" href="http://docs.python.org/library/logging.html">logging
的文档</a> 。</p>
</div>
<div class="section" id="wsgi">
<span id="hooking-in-wsgi-middlewares"></span><h2>整合 WSGI 中间件<a class="headerlink" href="#wsgi" title="永久链接至标题">¶</a></h2>
<p>如果你想给你的应用添加 WSGI 中间件，你可以封装内部 WSGI 应用。例如若是你想用 Werkzeug 包中的某个中间件来应付 lighttpd 中的 bugs ，可以这样做:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">werkzeug.contrib.fixers</span> <span class="kn">import</span> <span class="n">LighttpdCGIRootFix</span>
<span class="n">app</span><span class="o">.</span><span class="n">wsgi_app</span> <span class="o">=</span> <span class="n">LighttpdCGIRootFix</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">wsgi_app</span><span class="p">)</span>
</pre></div>
</div>
</div>
<div class="section" id="web">
<span id="depolying-to-a-web-server"></span><h2>部署到 Web 服务器<a class="headerlink" href="#web" title="永久链接至标题">¶</a></h2>
<p>准备好部署你的 Flask 应用了？你可以立即部署到托管平台来圆满完成快速入门，以下厂商均向小项目提供免费的方案:</p>
<ul class="simple">
<li><a class="reference external" href="http://devcenter.heroku.com/articles/python">在 Heroku 上部署 Flask</a></li>
<li><a class="reference external" href="http://docs.dotcloud.com/services/python/">在 dotCloud 上部署 Flask</a>
附 <a class="reference external" href="http://flask.pocoo.org/snippets/48/">Flask 的具体说明</a></li>
</ul>
<p>托管 Flask 应用的其它选择:</p>
<ul class="simple">
<li><a class="reference external" href="http://flask.pocoo.org/snippets/65/">在 Webfaction 上部署 Flask</a></li>
<li><a class="reference external" href="https://github.com/kamalgill/flask-appengine-template">在 Google App Engine 上部署 Flask</a></li>
<li><a class="reference external" href="http://flask.pocoo.org/snippets/89/">用 Localtunnel 共享你的本地服务器</a></li>
</ul>
<p>如果你有自己的主机，并且准备自己托管，参见 <a class="reference internal" href="http://docs.jinkan.org/docs/flask/deploying/index.html#deployment"><em>部署选择</em></a> 章节。</p>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper"><p class="logo"><a href="http://docs.jinkan.org/docs/flask/index.html">
  <img class="logo" src="%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%20%E2%80%94%20Flask%200.10.1%20%E6%96%87%E6%A1%A3_files/flask.png" alt="Logo">
</a></p>
  <h3><a href="http://docs.jinkan.org/docs/flask/index.html">內容目录</a></h3>
  <ul>
<li><a class="reference internal" href="#">快速入门</a><ul>
<li><a class="reference internal" href="#a-minimal-application">一个最小的应用</a></li>
<li><a class="reference internal" href="#debug-mode">调试模式</a></li>
<li><a class="reference internal" href="#routing">路由</a><ul>
<li><a class="reference internal" href="#variable-rules">变量规则</a></li>
<li><a class="reference internal" href="#url">构造 URL</a></li>
<li><a class="reference internal" href="#http">HTTP 方法</a></li>
</ul>
</li>
<li><a class="reference internal" href="#static-files">静态文件</a></li>
<li><a class="reference internal" href="#id7">模板渲染</a></li>
<li><a class="reference internal" href="#accessing-request-data">访问请求数据</a><ul>
<li><a class="reference internal" href="#context-locals">环境局部变量</a></li>
<li><a class="reference internal" href="#the-request-object">请求对象</a></li>
<li><a class="reference internal" href="#file-uploads">文件上传</a></li>
<li><a class="reference internal" href="#cookies">Cookies</a></li>
</ul>
</li>
<li><a class="reference internal" href="#redirects-and-errors">重定向和错误</a></li>
<li><a class="reference internal" href="#about-responses">关于响应</a></li>
<li><a class="reference internal" href="#sessions">会话</a></li>
<li><a class="reference internal" href="#id19">消息闪现</a></li>
<li><a class="reference internal" href="#logging">日志记录</a></li>
<li><a class="reference internal" href="#wsgi">整合 WSGI 中间件</a></li>
<li><a class="reference internal" href="#web">部署到 Web 服务器</a></li>
</ul>
</li>
</ul>
<h3>相关主题</h3>
<ul>
  <li><a href="http://docs.jinkan.org/docs/flask/index.html">文档概览</a><ul>
      <li>上一章：<a href="http://docs.jinkan.org/docs/flask/installation.html" title="上一章">安装</a></li>
      <li>下一章：<a href="http://docs.jinkan.org/docs/flask/tutorial/index.html" title="下一章">教程</a></li>
  </ul></li>
</ul>
  <h3>本页</h3>
  <ul class="this-page-menu">
    <li><a href="http://docs.jinkan.org/docs/flask/_sources/quickstart.txt" rel="nofollow">显示源代码</a></li>
  </ul>
<div id="searchbox" style="">
  <h3>快速搜索</h3>
    <form class="search" action="search.html" method="get">
      <input name="q" type="text">
      <input value="转向" type="submit">
      <input name="check_keywords" value="yes" type="hidden">
      <input name="area" value="default" type="hidden">
    </form>
    <p class="searchtip" style="font-size: 90%">
    输入相关的术语，模块，类或者函数名称进行搜索
    </p>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
  <div class="footer">
    © Copyright 2013, Armin Ronacher.
    Created using <a href="http://sphinx.pocoo.org/">Sphinx</a>.
  </div>
  
  
</body></html>